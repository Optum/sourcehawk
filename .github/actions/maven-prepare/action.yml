name: 'Maven Prepare'
description: 'Prepare maven for the build'

inputs:
  primary-java-version:
    description: 'Primary Java Version'
    required: true
    default: '11'
  java-version:
    description: 'Java Version'
    required: true
  release:
    description: 'Release build?'
    required: true
    default: 'false'

outputs:
  build-version:
    description: "Build Version"
    value: ${{ steps.set-maven-project-version.outputs.VERSION }}

runs:
  using: "composite"
  steps:
    - name: Setup Maven Cache
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Setup Sonar Cache
      if: (github.event_name == 'push' && inputs.java-version == inputs.primary-java-version)
      uses: actions/cache@v1
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Setup Java and Maven
      uses: actions/setup-java@v1
      with:
        java-version: ${{ inputs.java-version }}
        server-id: ossrh
        server-username: SONATYPE_USERNAME
        server-password: SONATYPE_PASSWORD
        gpg-private-key: ${{ secrets.SONATYPE_GPG_PRIVATE_KEY }}
        gpg-passphrase: SONATYPE_GPG_PASSPHRASE
    - name: Read Maven Project Version
      id: read-maven-project-version
      shell: bash
      run: |
        POM_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout | tail -1 | tr -d '\r\n')
        echo ::set-output name=POM_VERSION::$POM_VERSION
    - name: Set Maven Project Version (Release)
      id: set-maven-project-version
      if: inputs.release == 'true'
      shell: bash
      run: |
        if [[ "$POM_VERSION" == *"-SNAPSHOT" ]]; 
        then
          BUILD_VERSION="${POM_VERSION%"-SNAPSHOT"}"
          ./mvnw --batch-mode versions:set -D removeSnapshot || true
        else
          BUILD_VERSION="$POM_VERSION"
        fi
        [[ "$(git tag -l $BUILD_VERSION)" == "$BUILD_VERSION" ]] && echo "Tag $BUILD_VERSION already exists" && exit 1
        echo ::set-output name=VERSION::$BUILD_VERSION
      env:
        POM_VERSION: ${{ steps.read-maven-project-version.outputs.POM_VERSION }}
    - name: Set Maven Project Version (Snapshot)
      id: set-maven-project-version
      if: inputs.release == 'false'
      shell: bash
      run: |
        [[ "$POM_VERSION" != *"-SNAPSHOT" ]] && ./mvnw --batch-mode versions:set -DnewVersion="$POM_VERSION-SNAPSHOT" || true
      env:
        POM_VERSION: ${{ steps.read-maven-project-version.outputs.POM_VERSION }}